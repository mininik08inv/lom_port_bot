from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict

from app.database.db import list_directions, list_pzu_in_direction
from app.utils.map_utils import generate_yandex_map_link


def create_kb_for_contacts():
    "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é /contacts"
    author_id = 897813157
    author_button = InlineKeyboardButton(
        text="–ê–≤—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞", url=f"tg://user?id={author_id}"
    )

    lomportbotchat_button = InlineKeyboardButton(
        text="–û–±—â–∏–π —á–∞—Ç –±–æ—Ç–∞", url="https://t.me/lomportbotchat"
    )
    contacts_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[lomportbotchat_button], [author_button]]
    )
    return contacts_keyboard


def create_kb_for_help():
    lomport_url_button = InlineKeyboardButton(
        text="–ë—É–¥–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–µ—Ç–∏—Ç–µ –º–æ–π —Å–∞–π—Ç üöõ", url="https://lomovoz-portal.ru"
    )

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    help_keyboard = InlineKeyboardMarkup(inline_keyboard=[[lomport_url_button]])
    return help_keyboard


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ /list_pzu
async def create_kb_for_list_pzu() -> InlineKeyboardMarkup:
    request_result = await list_directions()
    request_result.sort()

    buttons = [
        InlineKeyboardButton(text=direction, callback_data=direction)
        for direction in request_result
    ]
    directions_keyboard = InlineKeyboardBuilder()
    directions_keyboard.row(*buttons, width=2)
    return directions_keyboard.as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def create_kb_for_direction(direction: str) -> InlineKeyboardMarkup:
    request_result = await list_pzu_in_direction(direction)
    request_result.sort()
    buttons = [
        InlineKeyboardButton(text=pzu, callback_data=pzu) for pzu in request_result
    ]
    directions_keyboard = InlineKeyboardBuilder()
    if direction == "–ó–∞–≤–æ–¥—ã –ß–ú":
        directions_keyboard.row(*buttons, width=2)
    else:
        directions_keyboard.row(*buttons, width=3)
    return directions_keyboard.as_markup()


# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞
def donat_amount_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="100 —Ä—É–±", callback_data="amount_100"),
                InlineKeyboardButton(text="200 —Ä—É–±", callback_data="amount_200"),
            ],
            [
                InlineKeyboardButton(text="500 —Ä—É–±", callback_data="amount_500"),
                InlineKeyboardButton(text="1000 —Ä—É–±", callback_data="amount_1000"),
            ],
            [
                InlineKeyboardButton(
                    text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="custom_amount"
                ),
            ],
        ]
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
def transition_to_payment_keyboard(url: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)]]
    )


def create_weight_control_keyboard(weight_controls: List[Dict], search_lat: float = None, search_lon: float = None, search_radius: int = 50) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—ã –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    
    Args:
        weight_controls: –°–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        search_lat: –®–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ –ø—É–Ω–∫—Ç—ã")
        search_lon: –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ –ø—É–Ω–∫—Ç—ã")  
        search_radius: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–º (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ –ø—É–Ω–∫—Ç—ã")
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—ã
    """
    buttons = []
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    limited_controls = weight_controls[:5]
    
    for wc in limited_controls:
        if wc.get('latitude') and wc.get('longitude'):
            distance = round(wc['distance'], 1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
            button_text = f"üìç {wc['name'][:25]}... ({distance} –∫–º)"
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
            # map_link = generate_yandex_map_link(
            #     wc['latitude'],
            #     wc['longitude'],
            #     wc['name']
            # )

            map_link = wc['url']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            buttons.append([
                InlineKeyboardButton(
                    text=button_text,
                    url=map_link
                )
            ])
    
    # –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–æ–≤ –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö
    if len(weight_controls) > 5:
        # remaining_count = len(weight_controls) - 5
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Å–∂–∞—Ç–æ)
        if search_lat is not None and search_lon is not None:
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            lat_short = round(search_lat, 4)
            lon_short = round(search_lon, 4)
            callback_data = f"wc_more:{lat_short}:{lon_short}:{search_radius}"
        else:
            callback_data = "weight_control_more_info"
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ {len(weight_controls)} –ø—É–Ω–∫—Ç–æ–≤",
                callback_data=callback_data
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –æ–¥–Ω—É
combined_kb = create_kb_for_contacts()
# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–û–î–î–ï–†–ñ–ê–¢–¨"
combined_kb.inline_keyboard.insert(
    0, [InlineKeyboardButton(text="–ü–û–î–î–ï–†–ñ–ê–¢–¨", callback_data="/donate")]
)
