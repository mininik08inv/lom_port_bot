
from aiogram.types import CallbackQuery
from aiogram import Router

from app.filters.my_filters import direction_filter, pzu_filter
from app.lexicon.lexicon import LEXICON
from app.utils.generating_a_reply_message import generating_a_reply_message
from app.database.db import (
    query_item_in_database,
    add_id_to_database,
)
from app.keyboards.inline import create_kb_for_direction
from app.handlers.weight_control_handlers import add_weight_control_check_to_pzu_response, convert_pzu_tuple_to_dict

import logging

logger = logging.getLogger("lomportbot.callback_directions")

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db_logger = logging.getLogger("db_logger")

router = Router()


@router.callback_query(direction_filter)
async def process_buttons_directions_press(callback: CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = await create_kb_for_direction(callback.data)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {callback.data}", reply_markup=kb
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {callback.data}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(pzu_filter)
async def process_buttons_pzu_press(callback: CallbackQuery):
    reply_message = None
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ asincpg.Record
        res_data = await query_item_in_database(callback.data.upper())
        # –ü–µ—Ä–µ–¥–∞–µ–º  –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ –≤ —Ñ—É–Ω–∫—Ü–∏—é
        if res_data:
            reply_message = await generating_a_reply_message(res_data)
        else:
            reply_message = LEXICON["not_found"]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = callback.from_user.id
        await add_id_to_database(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text=f"–í–æ—Ç –≤–∞—à–µ –ü–ó–£ - {callback.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –µ—Å–ª–∏ –ü–ó–£ –Ω–∞–π–¥–µ–Ω
        if res_data:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –ü–ó–£: {callback.data.upper()}")
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Å–æ–≤—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
                pzu_data = convert_pzu_tuple_to_dict(res_data)
                updated_message, weight_keyboard = await add_weight_control_check_to_pzu_response(
                    pzu_data, reply_message
                )
                
                if weight_keyboard:
                    # –ï—Å—Ç—å –≤–µ—Å–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                    await callback.message.answer(text=updated_message, reply_markup=weight_keyboard, parse_mode="HTML")
                else:
                    # –í–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ—Ç - –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    await callback.message.answer(text=reply_message, parse_mode="HTML")
            except Exception as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è callback: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                await callback.message.answer(text=reply_message, parse_mode="HTML")
        else:
            # –ü–ó–£ –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            await callback.message.answer(text=reply_message, parse_mode="HTML")
        
        await callback.answer()

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ü–ó–£ %s: %s", callback.data.upper(), e)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

    finally:
        logger.info(
            f'User id:{callback.from_user.id}, user_name:{callback.from_user.username}, fullname:{callback.from_user.full_name}  –∑–∞–ø—Ä–æ—Å–∏–ª –ü–ó–£: "{callback.data.upper()}"'
        )
        # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_logger.info(
            'User id:%s, user_name:%s, fullname:%s –∑–∞–ø—Ä–æ—Å–∏–ª –ü–ó–£: "%s"',
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.full_name,
            callback.data.upper(),
            extra={
                "user_id": callback.from_user.id,
                "user_name": callback.from_user.username,
                "fullname": callback.from_user.full_name,
                "pzu_name": callback.data.upper(),
            },
        )
