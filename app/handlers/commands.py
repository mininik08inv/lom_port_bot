from copy import deepcopy

from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import Command, ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.types import ContentType
from aiogram import F
from aiogram import Router

from app.utils.generating_a_reply_message import generating_a_reply_message
from app.database.db import users_db, query_item_in_database
from app.keyboards.inline import create_kb_for_help, create_kb_for_contacts, create_kb_for_list_pzu
from app.lexicon.lexicon import LEXICON

import logging

logger = logging.getLogger('lomportbot.commands')

router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
async def process_start_command(message: Message):
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, user_name: {message.from_user.username} - –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞"
    )
    await message.answer(text=LEXICON['/start'])
    if message.from_user.id not in users_db:
        users_db.append(message.from_user.id)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
async def process_help_command(message: Message):
    await message.answer(
        text=LEXICON['/help'],
        reply_markup=create_kb_for_help()
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/contacts"
async def process_contacts_command(message: Message):
    await message.answer(
        text=LEXICON['/contacts'],
        reply_markup=create_kb_for_contacts()
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/list_pzu"
async def process_list_pzu_command(message: Message):
    # logger.info("User: %s, user_name: %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–∑—É", {message.from_user.id}, {message.from_user.username})
    kb = create_kb_for_list_pzu()
    await message.answer(
        text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞–π.',
        reply_markup=kb
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç—É —Ñ–æ—Ç–æ
async def if_the_photo(message: Message):
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {message.from_user.id}, user_name: {message.from_user.username}, fullname: {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ"
    )

    # await message.reply_photo(message.photo[0].file_id)
    await message.answer("–Ø –∫–æ–Ω–µ—á–Ω–æ –ª—é–±–ª—é –∫–∞—Ä—Ç–∏–∫–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç—É —Å—Ç–∏–∫–µ—Ä–∞
async def if_the_sticker(message: Message):
    # await message.reply_photo(message.photo[0].file_id)
    await message.answer("–°—Ç–∏–∫–µ—Ä—ã üòè, —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ!")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def if_the_voice(message: Message):
    await message.answer(
        text="–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ê —è –ø–æ–∫–∞ —á—Ç–æ —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–ºüòî"
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
async def send_point(message: Message):
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞
        res_data = query_item_in_database(message.text.upper().replace(" ", "").replace("-", ""))
        # –ü–µ—Ä–µ–¥–∞–µ–º  –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ –≤ —Ñ—É–Ω–∫—Ü–∏—é
        if res_data:
            reply_message = generating_a_reply_message(res_data)
        else:
            reply_message = LEXICON['not_found']

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.exception("–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞", e, message)

    finally:
        logger.info(
            f'User id:{message.from_user.id}, user_name:{message.from_user.username}, fullname:{message.from_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ü–ó–£: "{message.text.upper()}"'
        )
    await message.answer(text=reply_message, parse_mode="HTML")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def process_user_blocked_bot(event: ChatMemberUpdated):
    logger.warning(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id}, user_name: {event.from_user.username} - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±–æ—Ç–∞ —Ä–∞—Å–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
async def process_user_unblocked_bot(event: ChatMemberUpdated):
    logger.warning(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id}, user_name: {event.from_user.username} - –†–ê–ó–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
    )


# –≠—Ç–æ—Ç —Ö–µ–¥—Ä–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∞–ø–¥–µ–π—Ç–µ
async def if_something_else(message: Message):
    await message.answer(
        "–í–∏–¥–µ–æ, –ê—É–¥–∏–æ, –î–æ–∫—É–º–µ–Ω—Ç—ã, –ò–≥—Ä—ã –∏ —Ç.–¥ –º–µ–Ω—è –º–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Çüòè, —Ç–µ–∫—Å—Ç –∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!"
    )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
router.message.register(process_start_command, Command(commands="start"))
router.message.register(process_help_command, Command(commands="help"))
router.message.register(process_contacts_command, Command(commands="contacts"))
router.message.register(process_list_pzu_command, Command(commands="list_pzu"))
router.message.register(if_the_photo, F.content_type == ContentType.PHOTO)
router.message.register(if_the_sticker, F.content_type == ContentType.STICKER)
router.message.register(if_the_voice, F.content_type == ContentType.VOICE)
router.message.register(
    if_something_else,
    F.content_type.in_(
        {
            ContentType.ANIMATION,
            ContentType.VIDEO,
            ContentType.VIDEO_NOTE,
            ContentType.AUDIO,
            ContentType.DOCUMENT,
            ContentType.GAME,
            ContentType.UNKNOWN,
            ContentType.ANY,
        }
    ),
)
router.my_chat_member.register(
    process_user_blocked_bot, ChatMemberUpdatedFilter(member_status_changed=KICKED)
)
router.my_chat_member.register(
    process_user_unblocked_bot, ChatMemberUpdatedFilter(member_status_changed=MEMBER)
)
router.message.register(send_point)
