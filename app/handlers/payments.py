import yookassa
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.keyboards.inline import donat_amount_keyboard, transition_to_payment_keyboard
import logging

logger = logging.getLogger('lomportbot.pyments')

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ÆKassa
yookassa.Configuration.account_id = '1055012'
yookassa.Configuration.secret_key = 'test_S4EZprxQ53dIWH0FPO9zCOVd1iWYxems8KqrGcP0yA0'


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class DonateState(StatesGroup):
    waiting_for_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    waiting_for_custom_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /donate
@router.message(Command("donate"))
async def process_donate_command(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        reply_markup=donat_amount_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(DonateState.waiting_for_amount)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /donate
@router.callback_query(F.data.in_('/donate'))
async def process_donate_command(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é  callback.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        reply_markup=donat_amount_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(DonateState.waiting_for_amount)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@router.callback_query(DonateState.waiting_for_amount, F.data.startswith("amount_"))
async def process_amount(callback: CallbackQuery, state: FSMContext):
    amount = int(callback.data.split("_")[1])
    logger.info(f"User {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å—É–º–º—É: {amount} RUB.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount)
    await create_payment(callback.message, amount)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–î—Ä—É–≥–∞—è —Å—É–º–º–∞"
@router.callback_query(DonateState.waiting_for_amount, F.data == "custom_amount")
async def process_custom_amount(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—É–º–º—É.")
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300):")
    await state.set_state(DonateState.waiting_for_custom_amount)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é
@router.message(DonateState.waiting_for_custom_amount, F.text.regexp(r"^\d+$"))
async def process_custom_amount_input(message: Message, state: FSMContext):
    amount = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"User {message.from_user.id} –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—É–º–º—É: {amount} RUB.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount)
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –æ–ø–ª–∞—Ç—ã
    await create_payment(message, amount)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@router.message(DonateState.waiting_for_custom_amount)
async def process_invalid_amount(message: Message):
    logger.warning(f"User {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É: {message.text}.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 300).")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
async def create_payment(message: Message, amount: int):
    try:
        # –°–æ–∑–¥–∞–µ–º Deep Link –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–æ—Ç–∞
        deep_link = f"https://t.me/course_stepik_test_bot?payment_success=payment_success_{amount}"

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        payment = yookassa.Payment.create({
            "amount": {
                "value": f"{amount}.00",  # –°—É–º–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "100.00"
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                "return_url": deep_link  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Deep Link –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–æ—Ç–∞
            },
            "capture": True,
            "description": "–î–æ–Ω–∞—Ç –¥–ª—è –±–æ—Ç–∞"
        })
        url = payment.confirmation.confirmation_url
        kb = transition_to_payment_keyboard(url)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=kb)
        logger.info(
            f"–ü–ª–∞—Ç–µ–∂, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {amount} RUB. Payment URL: {url}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. Error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(Command("payment_success"))
async def process_start_command(message: Message):
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("payment_success_"):
        amount = args[1].split("_")[2]
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±–ª–µ–π! üéâ")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /donate –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞.")

