from typing import Optional

import yookassa
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, MagicData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.config_data.config import load_config
from app.keyboards.inline import donat_amount_keyboard, transition_to_payment_keyboard
from app.keyboards.kb import get_cancel_keyboard
import logging

logger = logging.getLogger("lomportbot.payments")

config = load_config()

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ÆKassa
yookassa.Configuration.account_id = config.yoo_kassa.account_id
yookassa.Configuration.secret_key = config.yoo_kassa.secret_key


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class DonateState(StatesGroup):
    waiting_for_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    waiting_for_custom_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /donate
@router.message(Command("donate"))
async def process_donate_command(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=donat_amount_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(DonateState.waiting_for_amount)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /donate
@router.callback_query(F.data.in_("/donate"))
async def process_donate_command(callback: CallbackQuery, state: FSMContext):
    logger.info(
        f"User {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é  callback."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=donat_amount_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(DonateState.waiting_for_amount)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@router.callback_query(DonateState.waiting_for_amount, F.data.startswith("amount_"))
async def process_amount(callback: CallbackQuery, state: FSMContext):
    amount = int(callback.data.split("_")[1])
    logger.info(f"User {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å—É–º–º—É: {amount} RUB.")
    await state.update_data(amount=amount)
    await create_payment(
        amount, user_id=callback.from_user.id, message=callback.message
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–î—Ä—É–≥–∞—è —Å—É–º–º–∞"
@router.callback_query(DonateState.waiting_for_amount, F.data == "custom_amount")
async def process_custom_amount(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—É–º–º—É.")
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300):")
    await state.set_state(DonateState.waiting_for_custom_amount)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message(
    DonateState.waiting_for_custom_amount,
    ~F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞"]),  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
)
async def process_amount_input(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
    if message.text.isdigit():
        amount = int(message.text)
        if 10 <= amount <= 100000:
            await create_payment(amount, message.from_user.id, message)
            return
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 000 —Ä—É–±.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ–Ω–æ–π
    await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(DonateState.waiting_for_custom_amount, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_input(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–æ–¥ —Å—É–º–º—ã –æ—Ç–º–µ–Ω—ë–Ω!", reply_markup=ReplyKeyboardRemove())
    logger.info(f"User {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ —Å—É–º–º—ã")


# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
@router.message(DonateState.waiting_for_custom_amount, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_amount_input(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–æ–¥ —Å—É–º–º—ã –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@router.message(DonateState.waiting_for_custom_amount)
async def process_invalid_amount(message: Message):
    logger.warning(f"User {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É: {message.text}.")
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 300)."
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
async def create_payment(amount: int, user_id: int, message: Optional[Message] = None):
    try:
        deep_link = (
            f"https://t.me/lom_port_bot?payment_success=payment_success_{amount}"
        )

        payment = yookassa.Payment.create(
            {
                "amount": {"value": f"{amount}.00", "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": deep_link},
                "capture": True,
                "description": "–î–æ–Ω–∞—Ç –¥–ª—è –±–æ—Ç–∞",
                "metadata": {
                    "user_id": str(user_id),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ metadata
                    "skip_receipt": "true",
                },
            }
        )

        url = payment.confirmation.confirmation_url
        kb = transition_to_payment_keyboard(url)

        if message:
            await message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=kb
            )
        else:
            # –ï—Å–ª–∏ message=None (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ callback), –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è user_id={user_id}")

        logger.info(
            f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω | User: {user_id} | –°—É–º–º–∞: {amount} RUB | URL: {url}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ | User: {user_id} | Error: {e}")
        if message:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(Command("payment_success"))
async def process_start_command(message: Message):
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("payment_success_"):
        amount = args[1].split("_")[2]
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±–ª–µ–π! üéâ")
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /donate –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞."
        )
