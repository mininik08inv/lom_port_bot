"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–Ω–∫—Ç–∞–º–∏ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from typing import List, Dict, Tuple

from app.services.weight_control_service import WeightControlService
from app.utils.map_utils import (
    generate_weight_control_warning
)
from app.keyboards.inline import create_weight_control_keyboard
import logging

logger = logging.getLogger("lomportbot.weight_control_handlers")

router = Router()


async def check_weight_control_near_pzu(
    pzu_coordinates: Tuple[float, float], 
    pzu_name: str = "–ü–ó–£",
    radius_km: int = 100
) -> Tuple[bool, str, List[Dict]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä—è–¥–æ–º —Å –ü–ó–£
    
    Args:
        pzu_coordinates: –ö–æ—Ä—Ç–µ–∂ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) –ü–ó–£
        pzu_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ü–ó–£ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        radius_km: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–Ω–∞–π–¥–µ–Ω—ã_–ª–∏_–ø—É–Ω–∫—Ç—ã, —Ç–µ–∫—Å—Ç_–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–ø–∏—Å–æ–∫_–ø—É–Ω–∫—Ç–æ–≤)
    """
    try:
        pzu_lat, pzu_lon = pzu_coordinates
        
        # –ü–æ–∏—Å–∫ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        weight_controls = await WeightControlService.find_nearby_weight_control(
            pzu_lat, pzu_lon, radius_km
        )
        
        if weight_controls:
            warning_text = generate_weight_control_warning(weight_controls)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(weight_controls)} –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è "
                       f"—Ä—è–¥–æ–º —Å {pzu_name}")
            return True, warning_text, weight_controls
        else:
            logger.info(f"–ü—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä—è–¥–æ–º —Å {pzu_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False, "", []
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è {pzu_name}: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è", []


@router.message(Command("weight_control_stats"))
async def cmd_weight_control_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É–Ω–∫—Ç–∞–º –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    try:
        stats = await WeightControlService.get_stats()
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è:\n\n"
        text += f"üìç –í—Å–µ–≥–æ –ø—É–Ω–∫—Ç–æ–≤: {stats['total_points']}\n"
        text += f"üó∫Ô∏è –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {stats['points_with_coordinates']}\n"
        
        if stats['points_with_coordinates'] > 0:
            percentage = (stats['points_with_coordinates'] / stats['total_points']) * 100
            text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {percentage:.1f}%\n"
        
        if stats['top_regions']:
            text += "\nüèÜ –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—É–Ω–∫—Ç–æ–≤:\n"
            for i, region_info in enumerate(stats['top_regions'][:5], 1):
                text += f"{i}. –†–µ–≥–∏–æ–Ω {region_info['region']}: {region_info['count']} –ø—É–Ω–∫—Ç–æ–≤\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data.startswith("weight_control_info:"))
async def callback_weight_control_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—É–Ω–∫—Ç–∞ –∏–∑ callback_data
        # external_id = callback.data.split(":")[1]
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        # conn = await get_db_connection()
        # point_info = await conn.fetchrow(
        #     "SELECT * FROM weight_control_points WHERE external_id = $1", external_id
        # )
        
        await callback.answer("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–Ω–∫—Ç–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@router.callback_query(F.data.startswith("wc_more:"))
async def callback_weight_control_show_all(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—É–Ω–∫—Ç—ã –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ callback_data: "wc_more:lat:lon:radius"
        data_parts = callback.data.split(":")
        if len(data_parts) != 4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞")
            return
        
        lat = float(data_parts[1])
        lon = float(data_parts[2])
        radius = int(data_parts[3])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤
        weight_controls = await WeightControlService.find_nearby_weight_control(
            lat, lon, radius
        )
        
        if weight_controls:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤
            points_text = f"üìç **–í—Å–µ –ø—É–Ω–∫—Ç—ã –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º:**\n\n"
            
            for i, wc in enumerate(weight_controls, 1):
                distance = round(wc['distance'], 1)
                region = wc.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
                points_text += f"{i}. **{wc['name']}**\n"
                points_text += f"   üìç {distance} –∫–º ‚Ä¢ {region}\n"
                if wc.get('latitude') and wc.get('longitude'):
                    points_text += f"   üó∫Ô∏è {wc['latitude']}, {wc['longitude']}\n"
                points_text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
            keyboard_controls = weight_controls[:10] if len(weight_controls) > 10 else weight_controls
            keyboard = create_weight_control_keyboard(keyboard_controls, lat, lon, radius)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
            await callback.message.answer(
                points_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            await callback.answer("üìã –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã")
            
        else:
            await callback.answer("‚ùå –ü—É–Ω–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")


@router.callback_query(F.data == "weight_control_more_info")
async def callback_weight_control_more_info_fallback(callback: CallbackQuery):
    """Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        await callback.answer(
            "‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 5 –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.\n\n"
            "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/find_weight_control —à–∏—Ä–æ—Ç–∞ –¥–æ–ª–≥–æ—Ç–∞ —Ä–∞–¥–∏—É—Å\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /find_weight_control 55.7558 37.6173 50",
            show_alert=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '–µ—â–µ –ø—É–Ω–∫—Ç–æ–≤': {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.message(Command("find_weight_control"))
async def cmd_find_weight_control(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    –§–æ—Ä–º–∞—Ç: /find_weight_control —à–∏—Ä–æ—Ç–∞ –¥–æ–ª–≥–æ—Ç–∞ [—Ä–∞–¥–∏—É—Å]
    """
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
        
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /find_weight_control —à–∏—Ä–æ—Ç–∞ –¥–æ–ª–≥–æ—Ç–∞ [—Ä–∞–¥–∏—É—Å]\n"
                "–ü—Ä–∏–º–µ—Ä: /find_weight_control 55.7558 37.6173 30"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat = float(args[0])
        lon = float(args[1])
        radius = int(args[2]) if len(args) > 2 else 50
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
            return
            
        if not (1 <= radius <= 200):
            await message.answer("‚ùå –†–∞–¥–∏—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 200 –∫–º!")
            return
        
        # –ü–æ–∏—Å–∫ –ø—É–Ω–∫—Ç–æ–≤
        await message.answer("üîç –ò—â–µ–º –ø—É–Ω–∫—Ç—ã –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è...")
        
        weight_controls = await WeightControlService.find_nearby_weight_control(
            lat, lon, radius
        )
        
        if weight_controls:
            warning_text = generate_weight_control_warning(weight_controls)
            keyboard = create_weight_control_keyboard(weight_controls, lat, lon, radius)
            
            await message.answer(
                f"üìç –ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}\n\n{warning_text}",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                f"‚úÖ –í —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º –æ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç "
                f"–ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")


async def add_weight_control_check_to_pzu_response(
    pzu_data: Dict,
    original_text: str
) -> Tuple[str, object]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫ –æ—Ç–≤–µ—Ç—É –æ –ü–ó–£
    
    Args:
        pzu_data: –î–∞–Ω–Ω—ã–µ –æ –ü–ó–£ (–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å latitude, longitude)
        original_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ –ü–ó–£
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_–∏–ª–∏_None)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ü–ó–£ (pzu_data —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂: [0]=id, [1]=name, [2]=lat, [3]=lng, [4]=phone, ...)
        if len(pzu_data) < 4 or not pzu_data[2] or not pzu_data[3]:
            return original_text, None
        
        pzu_coordinates = (float(pzu_data[2]), float(pzu_data[3]))  # lat, lng
        pzu_name = pzu_data[1] if len(pzu_data) > 1 and pzu_data[1] else '–ü–ó–£'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å
        has_weight_control, warning_text, weight_controls = await check_weight_control_near_pzu(
            pzu_coordinates, pzu_name
        )
        
        if has_weight_control:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
            updated_text = f"{original_text}\n\n{warning_text}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—ã (–ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ü–ó–£ –∫–∞–∫ —Ü–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞)
            keyboard = create_weight_control_keyboard(
                weight_controls, 
                pzu_coordinates[0],  # latitude
                pzu_coordinates[1],  # longitude
                50  # —Ä–∞–¥–∏—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            return updated_text, keyboard
        else:
            return original_text, None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è: {e}")
        return original_text, None
