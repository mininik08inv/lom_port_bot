"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å –ü–ó–£
"""

from typing import Tuple, Optional, Dict, Any
from aiogram.types import InlineKeyboardMarkup
from aiogram import Router

from app.services.weight_control_service import WeightControlService
from app.utils.map_utils import generate_weight_control_warning
from app.keyboards.inline import create_weight_control_keyboard

import logging

logger = logging.getLogger("lomportbot.weight_control_handlers")

router = Router()


async def add_weight_control_check_to_pzu_response(
    pzu_data: Dict[str, Any], 
    original_message: str
) -> Tuple[str, Optional[InlineKeyboardMarkup]]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫ –æ—Ç–≤–µ—Ç—É –æ –ü–ó–£
    
    Args:
        pzu_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ü–ó–£, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'latitude' –∏ 'longitude'
        original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ü–ó–£
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_–∏–ª–∏_None)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not pzu_data.get('latitude') or not pzu_data.get('longitude'):
            logger.warning(f"–ü–ó–£ {pzu_data.get('name', 'unknown')} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
            return original_message, None
        
        lat = float(pzu_data['latitude'])
        lon = float(pzu_data['longitude'])
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–ª—è –ü–ó–£ {pzu_data.get('name', 'unknown')} "
                   f"–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {lat}, {lon}")
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø—É–Ω–∫—Ç—ã –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        weight_controls = await WeightControlService.find_nearby_weight_control(
            lat, lon, radius_km=50
        )
        
        if not weight_controls:
            logger.info(f"‚úÖ –ü—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä—è–¥–æ–º —Å –ü–ó–£ {pzu_data.get('name', 'unknown')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return original_message, None
        
        logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(weight_controls)} –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä—è–¥–æ–º —Å –ü–ó–£ {pzu_data.get('name', 'unknown')}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning = generate_weight_control_warning(weight_controls)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_message = f"{original_message}\n\n{warning}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—ã
        keyboard = create_weight_control_keyboard(
            weight_controls, 
            search_lat=lat, 
            search_lon=lon, 
            search_radius=50
        )
        
        return updated_message, keyboard
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –ü–ó–£ {pzu_data.get('name', 'unknown')}: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return original_message, None


def convert_pzu_tuple_to_dict(pzu_tuple) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–∞–Ω–Ω—ã—Ö –ü–ó–£ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–æ–≤–∞—Ä—å
    
    Args:
        pzu_tuple: –ö–æ—Ä—Ç–µ–∂ (name, abbreviation, lat, lon, phone)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ü–ó–£
    """
    if not pzu_tuple:
        return {}
    
    return {
        'name': pzu_tuple[1],        # abbreviation - –Ω–∞–∑–≤–∞–Ω–∏–µ –ü–ó–£
        'address': pzu_tuple[0],     # name - –∞–¥—Ä–µ—Å
        'latitude': pzu_tuple[2],    # lat - —à–∏—Ä–æ—Ç–∞
        'longitude': pzu_tuple[3],   # lon - –¥–æ–ª–≥–æ—Ç–∞
        'phone': pzu_tuple[4]        # phone - —Ç–µ–ª–µ—Ñ–æ–Ω
    }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
@router.callback_query(lambda c: c.data.startswith("weight_control_"))
async def handle_weight_control_callback(callback):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    """
    try:
        if callback.data == "weight_control_more":
            # –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
