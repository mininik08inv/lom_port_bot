"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
"""

from typing import List, Dict
from urllib.parse import quote


def generate_yandex_map_link(lat: float, lon: float, name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Å –º–µ—Ç–∫–æ–π
    
    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lon: –î–æ–ª–≥–æ—Ç–∞  
        name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
        
    Returns:
        URL —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
    """
    encoded_name = quote(name)
    return f"https://yandex.ru/maps/?pt={lon},{lat}&z=15&l=map&text={encoded_name}"


def generate_google_map_link(lat: float, lon: float, name: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps
    
    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lon: –î–æ–ª–≥–æ—Ç–∞
        name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        URL —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Maps
    """
    if name:
        encoded_name = quote(name)
        return f"https://maps.google.com/?q={lat},{lon}+({encoded_name})"
    else:
        return f"https://maps.google.com/?q={lat},{lon}"


def generate_2gis_map_link(lat: float, lon: float, name: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ 2–ì–ò–°
    
    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lon: –î–æ–ª–≥–æ—Ç–∞
        name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        URL —Å—Å—ã–ª–∫–∞ –Ω–∞ 2–ì–ò–°
    """
    return f"https://2gis.ru/geo/{lon},{lat}"


def get_region_name(region_code: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –∫–æ–¥—É
    
    Args:
        region_code: –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "69", "68")
        
    Returns:
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –∫–æ–¥, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    region_codes = {
        '69': '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '68': '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '62': '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '35': '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '77': '–ú–æ—Å–∫–≤–∞',
        '78': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        '23': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
        '52': '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '47': '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '50': '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '51': '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '53': '–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '54': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '55': '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '56': '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '57': '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '58': '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '59': '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π',
        '60': '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '61': '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '63': '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '64': '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '65': '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '66': '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '67': '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '70': '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '71': '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '72': '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '73': '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '74': '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '75': '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π',
        '76': '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '79': '–ï–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å',
        '80': '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π',
        '81': '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π',
        '82': '–ö—Ä—ã–º',
        '83': '–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥',
        '84': '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥',
        '85': '–ß—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥',
        '86': '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥'
    }
    
    return region_codes.get(region_code, f'–†–µ–≥–∏–æ–Ω {region_code}')


def generate_weight_control_warning(weight_controls: List[Dict]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—É–Ω–∫—Ç–∞—Ö –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    
    Args:
        weight_controls: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    """
    if not weight_controls:
        return ""
    
    count = len(weight_controls)
    
    if count == 1:
        wc = weight_controls[0]
        distance = round(wc['distance'], 1)
        region_info = f" ({wc['region']} —Ä–µ–≥–∏–æ–Ω)" if wc.get('region') else ""
        
        warning = f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –í {distance} –∫–º –Ω–∞–π–¥–µ–Ω –ø—É–Ω–∫—Ç –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è:\n"
        warning += f"üìç {wc['name']}{region_info}"
        
        if wc.get('district'):
            warning += f"\nüèòÔ∏è {wc['district']}"
            
        if wc.get('description'):
            desc = wc['description'][:100] + "..." if len(wc['description']) > 100 else wc['description']
            warning += f"\nüìù {desc}"
            
        return warning
    
    else:
        nearest = min(weight_controls, key=lambda x: x['distance'])
        nearest_distance = round(nearest['distance'], 1)
        
        warning = f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–π–¥–µ–Ω–æ {count} –ø—É–Ω–∫—Ç–æ–≤ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ —Ä–∞–¥–∏—É—Å–µ 50 –∫–º\n"
        warning += f"üìç –ë–ª–∏–∂–∞–π—à–∏–π: {nearest['name']} ({nearest_distance} –∫–º)"
        
        if nearest.get('region'):
            region_name = get_region_name(nearest['region'])
            warning += f" - {region_name}"
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏—Ö
        if count > 1:
            warning += "\n\nüîç –î—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã:"
            for wc in weight_controls[1:4]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
                distance = round(wc['distance'], 1)
                region_info = ""
                if wc.get('region'):
                    region_name = get_region_name(wc['region'])
                    region_info = f" - {region_name}"
                warning += f"\n‚Ä¢ {wc['name'][:40]}... ({distance} –∫–º){region_info}"
                
        if count > 4:
            warning += f"\n‚Ä¢ ... –∏ –µ—â–µ {count - 4} –ø—É–Ω–∫—Ç–æ–≤"
            
        return warning


def generate_distance_info(distance: float) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
    
    Args:
        distance: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
    """
    distance_rounded = round(distance, 1)
    
    if distance_rounded < 5:
        emoji = "üî¥"  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
    elif distance_rounded < 15:
        emoji = "üü°"  # –ë–ª–∏–∑–∫–æ
    elif distance_rounded < 30:
        emoji = "üü†"  # –°—Ä–µ–¥–Ω–µ
    else:
        emoji = "üü¢"  # –î–∞–ª–µ–∫–æ
        
    return f"{emoji} {distance_rounded} –∫–º"


def format_weight_control_info(wc: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        wc: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—É–Ω–∫—Ç–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    info = f"üìç {wc['name']}\n"
    
    if wc.get('distance') is not None:
        info += f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {generate_distance_info(wc['distance'])}\n"
    
    if wc.get('region'):
        info += f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω: {wc['region']}\n"
        
    if wc.get('district'):
        info += f"üèòÔ∏è –†–∞–π–æ–Ω: {wc['district']}\n"
        
    if wc.get('address'):
        info += f"üè† –ê–¥—Ä–µ—Å: {wc['address']}\n"
        
    if wc.get('description'):
        desc = wc['description'][:150] + "..." if len(wc['description']) > 150 else wc['description']
        info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        
    return info.strip()


def create_map_links_text(wc: Dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∫–∞—Ä—Ç—ã
    
    Args:
        wc: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—É–Ω–∫—Ç–µ –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—ã
    """
    if not wc.get('latitude') or not wc.get('longitude'):
        return "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    lat, lon = wc['latitude'], wc['longitude']
    name = wc['name']
    
    yandex_link = generate_yandex_map_link(lat, lon, name)
    google_link = generate_google_map_link(lat, lon, name)
    gis_2_link = generate_2gis_map_link(lat, lon, name)
    
    links_text = "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö:\n"
    links_text += f"‚Ä¢ [–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã]({yandex_link})\n"
    links_text += f"‚Ä¢ [Google Maps]({google_link})\n"
    links_text += f"‚Ä¢ [2–ì–ò–°]({gis_2_link})"
    
    return links_text
